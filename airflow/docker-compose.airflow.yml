networks:
  default:
    driver: bridge

services:
  # Main project PostgreSQL database
  weather_postgis:
    image: postgis/postgis:15-3.3
    platform: linux/amd64
    container_name: weather_postgis
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=weatherdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5

  # Airflow's own PostgreSQL database
  postgres:
    image: postgis/postgis:15-3.3
    platform: linux/amd64
    container_name: weather_postgis_airflow
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=airflow
    ports:
      - "5433:5432"  # Different port to avoid conflict with main project
    volumes:
      - pgdata_airflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5

  airflow-init:
    build: { context: ., dockerfile: Dockerfile.airflow }
    container_name: weather_airflow_init
    depends_on:
      weather_postgis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@weather_postgis_airflow:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=ddm1C8aObnPc6tn6kAxVob1-coQWRJBozi-f9QqGXz4=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__WEBSERVER__EXPOSE_HOSTNAME=true
      - AIRFLOW__WEBSERVER__EXPOSE_STACKTRACE=true
      # Override database connection for the main project
      - DB_HOST=weather_postgis
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - MAIN_DB=weatherdb
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      - ../:/opt/airflow/project  # Mount the main project
    user: "50000:0"
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin &&
        echo 'Airflow initialization complete'
      "

  airflow-webserver:
    build: { context: ., dockerfile: Dockerfile.airflow }
    container_name: weather_airflow_webserver
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@weather_postgis_airflow:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=ddm1C8aObnPc6tn6kAxVob1-coQWRJBozi-f9QqGXz4=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__WEBSERVER__EXPOSE_HOSTNAME=true
      - AIRFLOW__WEBSERVER__EXPOSE_STACKTRACE=true
      # Override database connection for the main project
      - DB_HOST=weather_postgis
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - MAIN_DB=weatherdb
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      - ../:/opt/airflow/project
    user: "50000:0"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build: { context: ., dockerfile: Dockerfile.airflow }
    container_name: weather_airflow_scheduler
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@weather_postgis_airflow:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=ddm1C8aObnPc6tn6kAxVob1-coQWRJBozi-f9QqGXz4=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__WEBSERVER__EXPOSE_HOSTNAME=true
      - AIRFLOW__WEBSERVER__EXPOSE_STACKTRACE=true
      # Override database connection for the main project
      - DB_HOST=weather_postgis
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - MAIN_DB=weatherdb
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      - ../:/opt/airflow/project
    user: "50000:0"
    command: scheduler

  airflow-worker:
    build: { context: ., dockerfile: Dockerfile.airflow }
    container_name: weather_airflow_worker
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@weather_postgis_airflow:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=ddm1C8aObnPc6tn6kAxVob1-coQWRJBozi-f9QqGXz4=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__WEBSERVER__EXPOSE_HOSTNAME=true
      - AIRFLOW__WEBSERVER__EXPOSE_STACKTRACE=true
      # Override database connection for the main project
      - DB_HOST=weather_postgis
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - MAIN_DB=weatherdb
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      - ../:/opt/airflow/project
    user: "50000:0"
    command: celery worker

volumes:
  pgdata:
  pgdata_airflow:
